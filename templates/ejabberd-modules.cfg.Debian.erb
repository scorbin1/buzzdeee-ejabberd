modules:
  mod_adhoc: {}
  mod_admin_extra: {}
  mod_announce:
    access: announce
  mod_avatar: {}
  mod_blocking: {}
  mod_bosh: {}
  mod_caps: {}
  mod_carboncopy: {}
  mod_client_state: {}
  mod_configure: {}
  ## mod_delegation: {}   # for xep0356
  mod_disco: {}
  mod_fail2ban: {}
  mod_http_api: {}
  ## mod_http_upload:
  ##   put_url: https://@HOST@:5443/upload
  ##   custom_headers:
  ##     "Access-Control-Allow-Origin": "https://@HOST@"
  ##     "Access-Control-Allow-Methods": "GET,HEAD,PUT,OPTIONS"
  ##     "Access-Control-Allow-Headers": "Content-Type"
  mod_last: {}
  ## mod_mam:
  ##   ## Mnesia is limited to 2GB, better to use an SQL backend
  ##   ## For small servers SQLite is a good fit and is very easy
  ##   ## to configure. Uncomment this when you have SQL configured:
  ##   ## db_type: sql
  ##   assume_mam_usage: true
  ##   default: always
  mod_mqtt: {}
  mod_muc:
    access:
      - allow
    access_admin:
      - allow: admin
    access_create: muc_create
    access_persistent: muc_create
    access_mam:
      - allow
    default_room_options:
      mam: true
  mod_muc_admin: {}
  mod_offline:
    access_max_user_messages: max_user_offline_messages
<%- if @enable_mod_ping -%>  mod_ping: 
    send_pings: true
<%- unless @mod_ping_ack_timeout == 0 -%>    ping_ack_timeout: <%= @mod_ping_ack_timeout %><%- end -%>
<%- unless @mod_ping_interval == 0 -%>    ping_interval: <%= @mod_ping_interval %><%- end -%>
<%- unless @mod_ping_timeout_action == 'none' -%>    timeout_action: <%= @mod_ping_timeout_action %><%- end -%>
<%- else -%>  mod_ping: {}<%- end -%>
  mod_pres_counter:
    count: 20
    interval: 60
  mod_privacy: {}
  mod_private: {}
<% if @enable_mod_proxy65 %>
  mod_proxy65:
    access: <%= @mod_proxy65_access %>
    max_connections: <%= @mod_proxy65_connections %>
<%- else -%>  ## mod_proxy65:
  ##   access: local
  ##   max_connections: 5<%- end -%>
  mod_pubsub:
    access_createnode: pubsub_createnode
    plugins:
      - flat
      - pep
    force_node_config:
      "eu.siacs.conversations.axolotl.*":
        access_model: open
      ## Avoid buggy clients to make their bookmarks public
      storage:bookmarks:
        access_model: whitelist
  mod_push: {}
  mod_push_keepalive: {}
<% unless @mod_register_ips.empty? and @mod_register_subject.empty? and @mod_register_body.empty? %>
  mod_register:
    ## Only accept registration requests from the "trusted"
    ## network (see access_rules section above).
    ## Think twice before enabling registration from any
    ## address. See the Jabber SPAM Manifesto for details:
    ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
<%- else -%>
  ## mod_register:
  ##   ## Only accept registration requests from the "trusted"
  ##   ## network (see access_rules section above).
  ##   ## Think twice before enabling registration from any
  ##   ## address. See the Jabber SPAM Manifesto for details:
  ##   ## https://github.com/ge0rg/jabber-spam-fighting-manifesto
  ##   ip_access: trusted_network<%- end -%>
<%- unless @mod_register_ips.empty? -%>    ip_access: <%= @mod_register_ips %><%- end -%>
<%- unless @mod_register_subject.empty? and @mod_register_body.empty? -%>    welcome_message:<%- end -%>
<%- unless @mod_register_subject.empty? -%>      subject: "<%= @mod_register_subject %>"<%- end -%>
<%- unless @mod_register_body.empty? -%>      body: <%= @mod_register_body %><%- end -%>
  mod_roster:
    versioning: true
  mod_s2s_dialback: {}
  mod_shared_roster: {}
  mod_sic: {}
  mod_stream_mgmt:
    resend_on_timeout: if_offline
  mod_stun_disco: {}
  mod_vcard:
    search: false
  mod_vcard_xupdate: {}
  mod_version:
    show_os: false
  mod_webpresence: {}
  mod_pottymouth: {}
